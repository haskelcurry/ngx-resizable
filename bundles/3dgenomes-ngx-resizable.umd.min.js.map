{"version":3,"sources":["ng://@3dgenomes/ngx-resizable/lib/ngx-resizable.service.ts","ng://@3dgenomes/ngx-resizable/lib/window.service.ts","ng://@3dgenomes/ngx-resizable/lib/resizable/resizable.component.ts","ng://@3dgenomes/ngx-resizable/lib/resizable/drag.directive.ts","ng://@3dgenomes/ngx-resizable/lib/ngx-resizable.module.ts"],"names":["NgxResizableService","Injectable","args","providedIn","NgxResizeableWindowRef","Object","defineProperty","prototype","window","Éµ0","ResizableComponent","regionElement","windowRef","this","resizable","noTransition","rFlex","resizeStart","EventEmitter","resizing","resizeEnd","vx","vy","info","nativeElement","ngOnInit","flexBasis","style","ngAfterViewInit","nativeWindow","getComputedStyle","updateInfo","p","axis","parseInt","id","dragStart","direction","dragDir","start","x","y","w","getPropertyValue","h","emit","dragEnd","dragging","offset","operand","height","width","Component","selector","template","providers","provide","useValue","encapsulation","ViewEncapsulation","None","ElementRef","HostBinding","Input","Output","DragDirective","DragStart","Drag","DragEnd","onMousedown","e","which","clientX","clientY","onTouchstart","touch","touches","onMouseup","onTouchend","changedTouches","onMousemove","onTouchmove","Directive","HostListener","type","NgxResizableModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxResizableService {\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\n\nfunction getWindow(): any {\n  return window;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxResizeableWindowRef {\n  get nativeWindow(): any {\n    return getWindow();\n  }\n}\n","import { Component, OnInit, HostBinding, Input, ElementRef, ViewEncapsulation, Output, EventEmitter, AfterViewInit } from '@angular/core';\nimport { NgxResizeableWindowRef } from '../window.service';\nimport { Point } from './drag.directive';\n\n@Component({\n  selector: 'rsz-layout',\n  templateUrl: 'resizable.component.html',\n  styleUrls: ['resizable.component.scss'],\n  providers: [ { provide: 'Window', useValue: window } ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ResizableComponent implements OnInit, AfterViewInit {\n\n  @HostBinding('class.resizable') resizable = true;\n  @HostBinding('class.no-transition') noTransition = false;\n  @HostBinding('style.width') width;\n  @HostBinding('style.height') height;\n  @HostBinding('style.flex-basis') flexBasis;\n\n  @Input() directions;\n  @Input() rFlex = false;\n\n  @Output() resizeStart = new EventEmitter();\n  @Output() resizing = new EventEmitter();\n  @Output() resizeEnd = new EventEmitter();\n\n  private nativeElement;\n\n  private style;\n\n  private w;\n  private h;\n\n  private vx = 1;\n  private vy = 1;\n\n  private start;\n\n  private dragDir;\n\n  private axis;\n\n  private info = {};\n\n  constructor(private regionElement: ElementRef, private windowRef: NgxResizeableWindowRef) {\n    this.nativeElement = this.regionElement.nativeElement;\n  }\n\n  ngOnInit() {\n    if (!this.rFlex) { this.resizable = false; } // Added to permit use of component for all cells\n    this.flexBasis = 'flexBasis' in this.nativeElement.style ? 'flexBasis' :\n      'webkitFlexBasis' in this.nativeElement.style ? 'webkitFlexBasis' :\n      'msFlexPreferredSize' in this.nativeElement.style ? 'msFlexPreferredSize' : 'flexBasis';\n  }\n\n  ngAfterViewInit() {\n    this.style = this.windowRef.nativeWindow.getComputedStyle(this.nativeElement);\n  }\n\n  private updateInfo(p: Point) {\n    this.info['width'] = false; this.info['height'] = false;\n    if (this.axis === 'x') {\n      this.info['width'] = parseInt(this.nativeElement.style[this.rFlex ? this.flexBasis : 'width'], 10);\n    } else {\n      this.info['height'] = parseInt(this.nativeElement.style[this.rFlex ? this.flexBasis : 'height'], 10);\n    }\n    this.info['id'] = this.nativeElement.id;\n    this.info['point'] = p;\n  }\n\n  public dragStart(p: Point, direction) {\n    this.dragDir = direction;\n    this.axis = (this.dragDir === 'left' || this.dragDir === 'right') ? 'x' : 'y';\n    this.start = (this.axis === 'x' ? p.x : p.y);\n    this.w = parseInt(this.style.getPropertyValue('width'), 10);\n    this.h = parseInt(this.style.getPropertyValue('height'), 10);\n\n    this.resizeStart.emit({ info: this.info });\n\n    // prevent transition while dragging\n    this.noTransition = true;\n  }\n\n  public dragEnd(p: Point) {\n    this.updateInfo(p);\n    this.resizeEnd.emit({ info: this.info });\n    this.noTransition = false;\n  }\n\n  public dragging(p: Point) {\n    const offset = (this.axis === 'x') ? this.start - p.x : this.start - p.y;\n\n    let operand = 1;\n    switch (this.dragDir) {\n      case 'top':\n        operand = -1;\n        /* falls through */\n      case 'bottom':\n        const height = (this.h - offset * this.vy * operand) + 'px';\n        if (this.rFlex) {\n          this.flexBasis = height;\n        } else {\n          this.height = height;\n        }\n        break;\n      case 'left':\n        operand = -1;\n        /* falls through */\n      case 'right':\n        const width = (this.w - offset * this.vx * operand) + 'px';\n        if (this.rFlex) {\n          this.flexBasis = width;\n        } else {\n          this.width = width;\n        }\n        break;\n    }\n    this.updateInfo(p);\n    this.resizing.emit({ info: this.info });\n  }\n}\n","import { Directive, Output, EventEmitter, HostListener } from '@angular/core';\n\nexport type Point = {x: number, y: number};\n\n@Directive({\n  selector: '[rszDragHandle]'\n})\nexport class DragDirective {\n\n  @Output() DragStart = new EventEmitter<Point>();\n  @Output() Drag = new EventEmitter<Point>();\n  @Output() DragEnd = new EventEmitter<Point>();\n\n  private dragging = false;\n\n  @HostListener('mousedown', ['$event'])\n  onMousedown(e: MouseEvent) {\n    if (e.which === 1) {\n      this.dragging = true;\n      this.DragStart.emit({ x: e.clientX, y: e.clientY });\n    }\n  }\n  @HostListener('touchstart', ['$event'])\n  onTouchstart(e: TouchEvent) {\n    const touch = e.touches[0];\n    this.dragging = true;\n    this.DragStart.emit({ x: touch.clientX, y: touch.clientY });\n  }\n\n  @HostListener('document:mouseup', ['$event'])\n  onMouseup(e: MouseEvent) {\n    if (this.dragging) {\n      this.DragEnd.emit({ x: e.clientX, y: e.clientY });\n    }\n    this.dragging = false;\n  }\n  @HostListener('document:touchend', ['$event'])\n  @HostListener('document:touchcancel', ['$event'])\n  onTouchend(e: TouchEvent) {\n    if (this.dragging) {\n      const touch = e.changedTouches[0];\n      this.DragEnd.emit({ x: touch.clientX, y: touch.clientY });\n    }\n    this.dragging = false;\n  }\n\n  @HostListener('document:mousemove', ['$event'])\n  onMousemove(e: MouseEvent) {\n    if (this.dragging) {\n      this.Drag.emit({ x: e.clientX, y: e.clientY });\n    }\n  }\n  @HostListener('document:touchmove', ['$event'])\n  onTouchmove(e: TouchEvent) {\n    if (this.dragging) {\n      const touch = e.touches[0];\n      this.Drag.emit({ x: touch.clientX, y: touch.clientY });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ResizableComponent } from './resizable/resizable.component';\nimport { DragDirective } from './resizable/drag.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    ResizableComponent,\n    DragDirective\n  ],\n  exports: [\n    ResizableComponent,\n    DragDirective\n  ]\n})\nexport class NgxResizableModule { }\n"]}